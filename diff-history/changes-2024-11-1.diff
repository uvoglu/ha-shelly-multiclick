diff --git a/custom_components/shelly/coordinator.py b/custom_components/shelly/coordinator.py
index 6332e13..933cc34 100644
--- a/custom_components/shelly/coordinator.py
+++ b/custom_components/shelly/coordinator.py
@@ -69,6 +69,8 @@ from .utils import (
     update_device_fw_info,
 )
 
+# Multiclick delay between clicks in seconds
+MC_MULTICLICK_DELAY = 0.4
 
 @dataclass
 class ShellyEntryData:
@@ -121,6 +123,39 @@ class ShellyCoordinatorBase[_DeviceT: BlockDevice | RpcDevice](
             hass.bus.async_listen_once(EVENT_HOMEASSISTANT_STOP, self._handle_ha_stop)
         )
 
+    @callback
+    def _async_mc_send_event(
+        self, channel, delete, momentary_button, click_count, click_events
+    ):
+        if momentary_button:
+            self.hass.bus.async_fire(
+                "shelly.multiclick",
+                {
+                    ATTR_DEVICE_ID: self.device_id,
+                    ATTR_DEVICE: self.device.settings["device"]["hostname"],
+                    "device_name": self._mc_device_name,
+                    ATTR_CHANNEL: channel,
+                    "click_count" : 0,
+                    "click_events" : click_events
+                },
+            )
+        else:
+            self.hass.bus.async_fire(
+                "shelly.multiclick",
+                {
+                    ATTR_DEVICE_ID: self.device_id,
+                    ATTR_DEVICE: self.device.settings["device"]["hostname"],
+                    "device_name": self._mc_device_name,
+                    ATTR_CHANNEL: channel,
+                    "click_count" : click_count,
+                    "click_events" : ""
+                },
+            )
+
+        if delete:
+            self._mc_click_count[channel] = 0
+            self._mc_last_events[channel] = ""
+
     @cached_property
     def model(self) -> str:
         """Model of the device."""
@@ -240,6 +275,7 @@ class ShellyBlockCoordinator(ShellyCoordinatorBase[BlockDevice]):
             update_interval = (
                 UPDATE_PERIOD_MULTIPLIER * device.settings["coiot"]["update_period"]
             )
+        device_name = device.name if device.initialized else entry.title
         super().__init__(hass, entry, device, update_interval)
 
         self._last_cfg_changed: int | None = None
@@ -250,6 +286,12 @@ class ShellyBlockCoordinator(ShellyCoordinatorBase[BlockDevice]):
         self._push_update_failures: int = 0
         self._input_event_listeners: list[Callable[[dict[str, Any]], None]] = []
 
+        self._mc_device_name = device_name
+        self._mc_last_events: dict = {}
+        self._mc_last_state: dict = {}
+        self._mc_click_count: dict = {}
+        self._mc_click_timer: dict = {}
+
         entry.async_on_unload(
             self.async_add_listener(self._async_device_updates_handler)
         )
@@ -285,6 +327,11 @@ class ShellyBlockCoordinator(ShellyCoordinatorBase[BlockDevice]):
 
                 break
 
+        mc_momentary_button = True
+        if "longpush_time" in self.device.settings:
+            if self.device.settings["longpush_time"] <= 10:
+                mc_momentary_button = False
+
         # Check for input events and config change
         cfg_changed = 0
         for block in self.device.blocks:
@@ -321,6 +368,104 @@ class ShellyBlockCoordinator(ShellyCoordinatorBase[BlockDevice]):
             last_event_count = self._last_input_events_count.get(channel)
             self._last_input_events_count[channel] = block.inputEventCnt
 
+            mc_curr_event = block.inputEvent
+            if block.inputEventCnt is not None:
+                if self._mc_click_count.get(channel) is None:
+                    self._mc_click_count[channel] = 0
+                    self._mc_last_events[channel] = ""
+                if (
+                    last_event_count is not None 
+                    and self._mc_last_state.get(channel) is not None
+                ):
+                    if block.inputEventCnt != last_event_count:
+                        if self._mc_click_timer.get(channel) is not None:
+                            self._mc_click_timer[channel].cancel()
+                            self._mc_click_timer[channel] = None
+
+                        if mc_curr_event == "S":
+                            if self._mc_last_state.get(channel) == 1:
+                                self._mc_click_count[channel] += 1
+                            else:
+                                self._mc_click_count[channel] += 2
+                            if block.input == 1:
+                                self._mc_click_count[channel] += 1
+
+                            if block.inputEventCnt - last_event_count > 1:
+                                self._mc_click_count[channel] += (block.inputEventCnt - last_event_count - 1) * 2
+                                mc_curr_event = "S" * (block.inputEventCnt - last_event_count)
+
+                        if mc_curr_event == "L":
+                            if mc_momentary_button:
+                                if block.input != self._mc_last_state.get(channel):
+                                    self._mc_click_count[channel] += 1
+                                self._async_mc_send_event(
+                                    channel, 
+                                    False, 
+                                    mc_momentary_button, 
+                                    0, 
+                                    self._mc_last_events[channel] + "LSTART",
+                                )
+                            else:
+                                if self._mc_last_state.get(channel) == 0:
+                                    self._mc_click_count[channel] += 1
+                                else:
+                                    self._mc_click_count[channel] += 2
+
+                                if block.input == 0:
+                                    self._mc_click_count[channel] += 1
+
+                                if block.inputEventCnt - last_event_count > 1:
+                                    self._mc_click_count[channel] += (
+                                        block.inputEventCnt - last_event_count - 1
+                                    ) * 2
+
+                        self._mc_last_events[channel] += mc_curr_event
+
+                        if not mc_momentary_button or block.input == 0:
+                            self._mc_click_timer[channel] = asyncio.get_running_loop().call_later(
+                                MC_MULTICLICK_DELAY, 
+                                self._async_mc_send_event, 
+                                channel, 
+                                True, 
+                                mc_momentary_button, 
+                                self._mc_click_count[channel], 
+                                self._mc_last_events[channel],
+                            )
+
+                    if block.inputEventCnt == last_event_count and block.input != self._mc_last_state.get(channel):
+                        if self._mc_click_timer.get(channel) is not None:
+                            self._mc_click_timer[channel].cancel()
+                            self._mc_click_timer[channel] = None
+
+                        self._mc_click_count[channel] += 1
+
+                        if (
+                            mc_momentary_button 
+                            and block.input == 0 
+                            and len(self._mc_last_events[channel]) > 0
+                        ):
+                            if self._mc_last_events[channel][-1] == "L":
+                                self._async_mc_send_event(
+                                    channel, 
+                                    False, 
+                                    mc_momentary_button, 
+                                    0, 
+                                    self._mc_last_events[channel] + "STOP",
+                                )
+
+                        if not mc_momentary_button or block.input == 0:
+                            self._mc_click_timer[channel] = asyncio.get_running_loop().call_later(
+                                MC_MULTICLICK_DELAY, 
+                                self._async_mc_send_event, 
+                                channel, 
+                                True,
+                                mc_momentary_button, 
+                                self._mc_click_count[channel], 
+                                self._mc_last_events[channel],
+                            )
+
+                self._mc_last_state[channel] = block.input
+
             if (
                 last_event_count is None
                 or last_event_count == block.inputEventCnt
diff --git a/custom_components/shelly/manifest.json b/custom_components/shelly/manifest.json
index 38437fb..2f4b3e4 100644
--- a/custom_components/shelly/manifest.json
+++ b/custom_components/shelly/manifest.json
@@ -15,5 +15,6 @@
       "type": "_http._tcp.local.",
       "name": "shelly*"
     }
-  ]
+  ],
+  "version": "2024.11.1"
 }
